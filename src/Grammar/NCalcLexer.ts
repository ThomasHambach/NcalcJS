// Generated from src/Grammar/NCalc.g4 by ANTLR 4.9.0-SNAPSHOT


// using System;
// using System.Text;
// using System.Globalization;
// using NCalc.Domain;
	import {BinaryExpressionType} from "../NCalc/Domain/BinaryExpression"


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class NCalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly T__23 = 24;
	public static readonly T__24 = 25;
	public static readonly T__25 = 26;
	public static readonly T__26 = 27;
	public static readonly TRUE = 28;
	public static readonly FALSE = 29;
	public static readonly AND = 30;
	public static readonly OR = 31;
	public static readonly NOT = 32;
	public static readonly ID = 33;
	public static readonly INTEGER = 34;
	public static readonly FLOAT = 35;
	public static readonly STRING = 36;
	public static readonly DATETIME = 37;
	public static readonly NAME = 38;
	public static readonly EXPONENT = 39;
	public static readonly WS = 40;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "TRUE", "FALSE", "AND", "OR", "NOT", "ID", "INTEGER", 
		"FLOAT", "STRING", "DATETIME", "NAME", "EXPONENT", "LETTER", "DIGIT", 
		"EscapeSequence", "HexDigit", "UnicodeEscape", "WS", "A", "B", "C", "D", 
		"E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", 
		"S", "T", "U", "V", "W", "X", "Y", "Z",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'?'", "':'", "'||'", "'&&'", "'|'", "'^'", "'&'", "'=='", 
		"'='", "'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'!'", "'~'", "'**'", "'('", "')'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"TRUE", "FALSE", "AND", "OR", "NOT", "ID", "INTEGER", "FLOAT", "STRING", 
		"DATETIME", "NAME", "EXPONENT", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(NCalcLexer._LITERAL_NAMES, NCalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return NCalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace



		public BS: string = "\\";

		public ExtractString(text: string): string {
			let sb: string[] = [];
	        let startIndex = 1; // Skip initial quote
	        let slashIndex = -1;

	        const textencoder = new TextEncoder();
	        const decoder = new TextDecoder();

	        while ((slashIndex = sb.join().indexOf(this.BS, startIndex)) != -1)
	        {
	            let escapeType = sb[slashIndex + 1];
	            switch (escapeType)
	            {
	                case 'u':
	                    let hcode = [sb[slashIndex + 4], sb[slashIndex + 5]].join();
	                    let lcode = [sb[slashIndex + 2], sb[slashIndex + 3]].join();

	                    const hBytes = new Uint16Array(hcode.length);
	                    const lBytes = new Uint16Array(lcode.length);

	                    const merged = new Uint16Array(hBytes.length + lBytes.length);
	                    merged.set(hBytes);
	                    merged.set(lBytes, hBytes.length);

	                    const unicodeChar = decoder.decode(merged);

	                    // let unicodeChar = Encoding.Unicode.GetChars(new byte[] { System.Convert.ToByte(hcode, 16), System.Convert.ToByte(lcode, 16) })[0];
	                    sb.splice(slashIndex, 6, unicodeChar);
	                    // sb.Insert(slashIndex, unicodeChar);
	                    break;
	                case 'n': sb.splice(slashIndex, 2, '\n'); break;
	                case 'r': sb.splice(slashIndex, 2, '\r'); break;
	                case 't': sb.splice(slashIndex, 2, '\t'); break;
	                case '\'': sb.splice(slashIndex, 2, '\''); break;
	                case '\\': sb.splice(slashIndex, 2, '\\'); break;
	                default: throw new Error("Unvalid escape sequence: \\" + escapeType);
	            }

	            startIndex = slashIndex + 1;

	        }

	        sb.splice(0, 1);
	        sb.splice(sb.length - 1, 1);

	        return sb.join();
		}

		public Errors: any[] = [];
		public GetExpression(): any { return (ncalcExpression() as any).value };



	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(NCalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "NCalc.g4"; }

	// @Override
	public get ruleNames(): string[] { return NCalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return NCalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return NCalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return NCalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02*\u0189\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03" +
		"\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10" +
		"\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03" +
		"!\x03!\x03!\x03\"\x03\"\x03\"\x07\"\xEB\n\"\f\"\x0E\"\xEE\v\"\x03#\x06" +
		"#\xF1\n#\r#\x0E#\xF2\x03$\x07$\xF6\n$\f$\x0E$\xF9\v$\x03$\x03$\x06$\xFD" +
		"\n$\r$\x0E$\xFE\x03$\x05$\u0102\n$\x03$\x06$\u0105\n$\r$\x0E$\u0106\x03" +
		"$\x03$\x07$\u010B\n$\f$\x0E$\u010E\v$\x03$\x05$\u0111\n$\x03$\x06$\u0114" +
		"\n$\r$\x0E$\u0115\x03$\x03$\x05$\u011A\n$\x03%\x03%\x03%\x07%\u011F\n" +
		"%\f%\x0E%\u0122\v%\x03%\x03%\x03&\x03&\x07&\u0128\n&\f&\x0E&\u012B\v&" +
		"\x03&\x03&\x03\'\x03\'\x07\'\u0131\n\'\f\'\x0E\'\u0134\v\'\x03\'\x03\'" +
		"\x03(\x03(\x05(\u013A\n(\x03(\x06(\u013D\n(\r(\x0E(\u013E\x03)\x03)\x03" +
		"*\x03*\x03+\x03+\x03+\x05+\u0148\n+\x03,\x03,\x03-\x03-\x03-\x03-\x03" +
		"-\x03-\x03.\x03.\x03.\x03.\x03/\x03/\x030\x030\x031\x031\x032\x032\x03" +
		"3\x033\x034\x034\x035\x035\x036\x036\x037\x037\x038\x038\x039\x039\x03" +
		":\x03:\x03;\x03;\x03<\x03<\x03=\x03=\x03>\x03>\x03?\x03?\x03@\x03@\x03" +
		"A\x03A\x03B\x03B\x03C\x03C\x03D\x03D\x03E\x03E\x03F\x03F\x03G\x03G\x03" +
		"H\x03H\x02\x02\x02I\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
		"\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02" +
		"\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'" +
		"\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C" +
		"7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02" +
		"&K\x02\'M\x02(O\x02)Q\x02\x02S\x02\x02U\x02\x02W\x02\x02Y\x02\x02[\x02" +
		"*]\x02\x02_\x02\x02a\x02\x02c\x02\x02e\x02\x02g\x02\x02i\x02\x02k\x02" +
		"\x02m\x02\x02o\x02\x02q\x02\x02s\x02\x02u\x02\x02w\x02\x02y\x02\x02{\x02" +
		"\x02}\x02\x02\x7F\x02\x02\x81\x02\x02\x83\x02\x02\x85\x02\x02\x87\x02" +
		"\x02\x89\x02\x02\x8B\x02\x02\x8D\x02\x02\x8F\x02\x02\x03\x02$\x05\x02" +
		"\x02!))^^\x03\x02%%\x03\x02__\x04\x02GGgg\x04\x02--//\x05\x02C\\aac|\x07" +
		"\x02))^^ppttvv\x05\x022;CHch\x05\x02\v\f\x0E\x0F\"\"\x04\x02CCcc\x04\x02" +
		"DDdd\x04\x02EEee\x04\x02FFff\x04\x02HHhh\x04\x02IIii\x04\x02JJjj\x04\x02" +
		"KKkk\x04\x02LLll\x04\x02MMmm\x04\x02NNnn\x04\x02OOoo\x04\x02PPpp\x04\x02" +
		"QQqq\x04\x02RRrr\x04\x02SSss\x04\x02TTtt\x04\x02UUuu\x04\x02VVvv\x04\x02" +
		"WWww\x04\x02XXxx\x04\x02YYyy\x04\x02ZZzz\x04\x02[[{{\x04\x02\\\\||\x02" +
		"\u017C\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
		"\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02" +
		"\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02" +
		";\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02" +
		"\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02" +
		"\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03" +
		"\x02\x02\x02\x02[\x03\x02\x02\x02\x03\x91\x03\x02\x02\x02\x05\x93\x03" +
		"\x02\x02\x02\x07\x95\x03\x02\x02\x02\t\x98\x03\x02\x02\x02\v\x9B\x03\x02" +
		"\x02\x02\r\x9D\x03\x02\x02\x02\x0F\x9F\x03\x02\x02\x02\x11\xA1\x03\x02" +
		"\x02\x02\x13\xA4\x03\x02\x02\x02\x15\xA6\x03\x02\x02\x02\x17\xA9\x03\x02" +
		"\x02\x02\x19\xAC\x03\x02\x02\x02\x1B\xAE\x03\x02\x02\x02\x1D\xB1\x03\x02" +
		"\x02\x02\x1F\xB3\x03\x02\x02\x02!\xB6\x03\x02\x02\x02#\xB9\x03\x02\x02" +
		"\x02%\xBC\x03\x02\x02\x02\'\xBE\x03\x02\x02\x02)\xC0\x03\x02\x02\x02+" +
		"\xC2\x03\x02\x02\x02-\xC4\x03\x02\x02\x02/\xC6\x03\x02\x02\x021\xC8\x03" +
		"\x02\x02\x023\xCA\x03\x02\x02\x025\xCD\x03\x02\x02\x027\xCF\x03\x02\x02" +
		"\x029\xD1\x03\x02\x02\x02;\xD6\x03\x02\x02\x02=\xDC\x03\x02\x02\x02?\xE0" +
		"\x03\x02\x02\x02A\xE3\x03\x02\x02\x02C\xE7\x03\x02\x02\x02E\xF0\x03\x02" +
		"\x02\x02G\u0119\x03\x02\x02\x02I\u011B\x03\x02\x02\x02K\u0125\x03\x02" +
		"\x02\x02M\u012E\x03\x02\x02\x02O\u0137\x03\x02\x02\x02Q\u0140\x03\x02" +
		"\x02\x02S\u0142\x03\x02\x02\x02U\u0144\x03\x02\x02\x02W\u0149\x03\x02" +
		"\x02\x02Y\u014B\x03\x02\x02\x02[\u0151\x03\x02\x02\x02]\u0155\x03\x02" +
		"\x02\x02_\u0157\x03\x02\x02\x02a\u0159\x03\x02\x02\x02c\u015B\x03\x02" +
		"\x02\x02e\u015D\x03\x02\x02\x02g\u015F\x03\x02\x02\x02i\u0161\x03\x02" +
		"\x02\x02k\u0163\x03\x02\x02\x02m\u0165\x03\x02\x02\x02o\u0167\x03\x02" +
		"\x02\x02q\u0169\x03\x02\x02\x02s\u016B\x03\x02\x02\x02u\u016D\x03\x02" +
		"\x02\x02w\u016F\x03\x02\x02\x02y\u0171\x03\x02\x02\x02{\u0173\x03\x02" +
		"\x02\x02}\u0175\x03\x02\x02\x02\x7F\u0177\x03\x02\x02\x02\x81\u0179\x03" +
		"\x02\x02\x02\x83\u017B\x03\x02\x02\x02\x85\u017D\x03\x02\x02\x02\x87\u017F" +
		"\x03\x02\x02\x02\x89\u0181\x03\x02\x02\x02\x8B\u0183\x03\x02\x02\x02\x8D" +
		"\u0185\x03\x02\x02\x02\x8F\u0187\x03\x02\x02\x02\x91\x92\x07A\x02\x02" +
		"\x92\x04\x03\x02\x02\x02\x93\x94\x07<\x02\x02\x94\x06\x03\x02\x02\x02" +
		"\x95\x96\x07~\x02\x02\x96\x97\x07~\x02\x02\x97\b\x03\x02\x02\x02\x98\x99" +
		"\x07(\x02\x02\x99\x9A\x07(\x02\x02\x9A\n\x03\x02\x02\x02\x9B\x9C\x07~" +
		"\x02\x02\x9C\f\x03\x02\x02\x02\x9D\x9E\x07`\x02\x02\x9E\x0E\x03\x02\x02" +
		"\x02\x9F\xA0\x07(\x02\x02\xA0\x10\x03\x02\x02\x02\xA1\xA2\x07?\x02\x02" +
		"\xA2\xA3\x07?\x02\x02\xA3\x12\x03\x02\x02\x02\xA4\xA5\x07?\x02\x02\xA5" +
		"\x14\x03\x02\x02\x02\xA6\xA7\x07#\x02\x02\xA7\xA8\x07?\x02\x02\xA8\x16" +
		"\x03\x02\x02\x02\xA9\xAA\x07>\x02\x02\xAA\xAB\x07@\x02\x02\xAB\x18\x03" +
		"\x02\x02\x02\xAC\xAD\x07>\x02\x02\xAD\x1A\x03\x02\x02\x02\xAE\xAF\x07" +
		">\x02\x02\xAF\xB0\x07?\x02\x02\xB0\x1C\x03\x02\x02\x02\xB1\xB2\x07@\x02" +
		"\x02\xB2\x1E\x03\x02\x02\x02\xB3\xB4\x07@\x02\x02\xB4\xB5\x07?\x02\x02" +
		"\xB5 \x03\x02\x02\x02\xB6\xB7\x07>\x02\x02\xB7\xB8\x07>\x02\x02\xB8\"" +
		"\x03\x02\x02\x02\xB9\xBA\x07@\x02\x02\xBA\xBB\x07@\x02\x02\xBB$\x03\x02" +
		"\x02\x02\xBC\xBD\x07-\x02\x02\xBD&\x03\x02\x02\x02\xBE\xBF\x07/\x02\x02" +
		"\xBF(\x03\x02\x02\x02\xC0\xC1\x07,\x02\x02\xC1*\x03\x02\x02\x02\xC2\xC3" +
		"\x071\x02\x02\xC3,\x03\x02\x02\x02\xC4\xC5\x07\'\x02\x02\xC5.\x03\x02" +
		"\x02\x02\xC6\xC7\x07#\x02\x02\xC70\x03\x02\x02\x02\xC8\xC9\x07\x80\x02" +
		"\x02\xC92\x03\x02\x02\x02\xCA\xCB\x07,\x02\x02\xCB\xCC\x07,\x02\x02\xCC" +
		"4\x03\x02\x02\x02\xCD\xCE\x07*\x02\x02\xCE6\x03\x02\x02\x02\xCF\xD0\x07" +
		"+\x02\x02\xD08\x03\x02\x02\x02\xD1\xD2\x05\x83B\x02\xD2\xD3\x05\x7F@\x02" +
		"\xD3\xD4\x05\x85C\x02\xD4\xD5\x05e3\x02\xD5:\x03\x02\x02\x02\xD6\xD7\x05" +
		"g4\x02\xD7\xD8\x05]/\x02\xD8\xD9\x05s:\x02\xD9\xDA\x05\x81A\x02\xDA\xDB" +
		"\x05e3\x02\xDB<\x03\x02\x02\x02\xDC\xDD\x05]/\x02\xDD\xDE\x05w<\x02\xDE" +
		"\xDF\x05c2\x02\xDF>\x03\x02\x02\x02\xE0\xE1\x05y=\x02\xE1\xE2\x05\x7F" +
		"@\x02\xE2@\x03\x02\x02\x02\xE3\xE4\x05w<\x02\xE4\xE5\x05y=\x02\xE5\xE6" +
		"\x05\x83B\x02\xE6B\x03\x02\x02\x02\xE7\xEC\x05Q)\x02\xE8\xEB\x05Q)\x02" +
		"\xE9\xEB\x05S*\x02\xEA\xE8\x03\x02\x02\x02\xEA\xE9\x03\x02\x02\x02\xEB" +
		"\xEE\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xEC\xED\x03\x02\x02\x02\xED" +
		"D\x03\x02\x02\x02\xEE\xEC\x03\x02\x02\x02\xEF\xF1\x05S*\x02\xF0\xEF\x03" +
		"\x02\x02\x02\xF1\xF2\x03\x02\x02\x02\xF2\xF0\x03\x02\x02\x02\xF2\xF3\x03" +
		"\x02\x02\x02\xF3F\x03\x02\x02\x02\xF4\xF6\x05S*\x02\xF5\xF4\x03\x02\x02" +
		"\x02\xF6\xF9\x03\x02\x02\x02\xF7\xF5\x03\x02\x02\x02\xF7\xF8\x03\x02\x02" +
		"\x02\xF8\xFA\x03\x02\x02\x02\xF9\xF7\x03\x02\x02\x02\xFA\xFC\x070\x02" +
		"\x02\xFB\xFD\x05S*\x02\xFC\xFB\x03\x02\x02\x02\xFD\xFE\x03\x02\x02\x02" +
		"\xFE\xFC\x03\x02\x02\x02\xFE\xFF\x03\x02\x02\x02\xFF\u0101\x03\x02\x02" +
		"\x02\u0100\u0102\x05O(\x02\u0101\u0100\x03\x02\x02\x02\u0101\u0102\x03" +
		"\x02\x02\x02\u0102\u011A\x03\x02\x02\x02\u0103\u0105\x05S*\x02\u0104\u0103" +
		"\x03\x02\x02\x02\u0105\u0106\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02" +
		"\u0106\u0107\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108\u010C\x07" +
		"0\x02\x02\u0109\u010B\x05S*\x02\u010A\u0109\x03\x02\x02\x02\u010B\u010E" +
		"\x03\x02\x02\x02\u010C\u010A\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02" +
		"\u010D\u0110\x03\x02\x02\x02\u010E\u010C\x03\x02\x02\x02\u010F\u0111\x05" +
		"O(\x02\u0110\u010F\x03\x02\x02\x02\u0110\u0111\x03\x02\x02\x02\u0111\u011A" +
		"\x03\x02\x02\x02\u0112\u0114\x05S*\x02\u0113\u0112\x03\x02\x02\x02\u0114" +
		"\u0115\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0115\u0116\x03\x02" +
		"\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117\u0118\x05O(\x02\u0118\u011A" +
		"\x03\x02\x02\x02\u0119\xF7\x03\x02\x02\x02\u0119\u0104\x03\x02\x02\x02" +
		"\u0119\u0113\x03\x02\x02\x02\u011AH\x03\x02\x02\x02\u011B\u0120\x07)\x02" +
		"\x02\u011C\u011F\x05U+\x02\u011D\u011F\n\x02\x02\x02\u011E\u011C\x03\x02" +
		"\x02\x02\u011E\u011D\x03\x02\x02\x02\u011F\u0122\x03\x02\x02\x02\u0120" +
		"\u011E\x03\x02\x02\x02\u0120\u0121\x03\x02\x02\x02\u0121\u0123\x03\x02" +
		"\x02\x02\u0122\u0120\x03\x02\x02\x02\u0123\u0124\x07)\x02\x02\u0124J\x03" +
		"\x02\x02\x02\u0125\u0129\x07%\x02\x02\u0126\u0128\n\x03\x02\x02\u0127" +
		"\u0126\x03\x02\x02\x02\u0128\u012B\x03\x02\x02\x02\u0129\u0127\x03\x02" +
		"\x02\x02\u0129\u012A\x03\x02\x02\x02\u012A\u012C\x03\x02\x02\x02\u012B" +
		"\u0129\x03\x02\x02\x02\u012C\u012D\x07%\x02\x02\u012DL\x03\x02\x02\x02" +
		"\u012E\u0132\x07]\x02\x02\u012F\u0131\n\x04\x02\x02\u0130\u012F\x03\x02" +
		"\x02\x02\u0131\u0134\x03\x02\x02\x02\u0132\u0130\x03\x02\x02\x02\u0132" +
		"\u0133\x03\x02\x02\x02\u0133\u0135\x03\x02\x02\x02\u0134\u0132\x03\x02" +
		"\x02\x02\u0135\u0136\x07_\x02\x02\u0136N\x03\x02\x02\x02\u0137\u0139\t" +
		"\x05\x02\x02\u0138\u013A\t\x06\x02\x02\u0139\u0138\x03\x02\x02\x02\u0139" +
		"\u013A\x03\x02\x02\x02\u013A\u013C\x03\x02\x02\x02\u013B\u013D\x05S*\x02" +
		"\u013C\u013B\x03\x02\x02\x02\u013D\u013E\x03\x02\x02\x02\u013E\u013C\x03" +
		"\x02\x02\x02\u013E\u013F\x03\x02\x02\x02\u013FP\x03\x02\x02\x02\u0140" +
		"\u0141\t\x07\x02\x02\u0141R\x03\x02\x02\x02\u0142\u0143\x042;\x02\u0143" +
		"T\x03\x02\x02\x02\u0144\u0147\x07^\x02\x02\u0145\u0148\t\b\x02\x02\u0146" +
		"\u0148\x05Y-\x02\u0147\u0145\x03\x02\x02\x02\u0147\u0146\x03\x02\x02\x02" +
		"\u0148V\x03\x02\x02\x02\u0149\u014A\t\t\x02\x02\u014AX\x03\x02\x02\x02" +
		"\u014B\u014C\x07w\x02\x02\u014C\u014D\x05W,\x02\u014D\u014E\x05W,\x02" +
		"\u014E\u014F\x05W,\x02\u014F\u0150\x05W,\x02\u0150Z\x03\x02\x02\x02\u0151" +
		"\u0152\t\n\x02\x02\u0152\u0153\x03\x02\x02\x02\u0153\u0154\b.\x02\x02" +
		"\u0154\\\x03\x02\x02\x02\u0155\u0156\t\v\x02\x02\u0156^\x03\x02\x02\x02" +
		"\u0157\u0158\t\f\x02\x02\u0158`\x03\x02\x02\x02\u0159\u015A\t\r\x02\x02" +
		"\u015Ab\x03\x02\x02\x02\u015B\u015C\t\x0E\x02\x02\u015Cd\x03\x02\x02\x02" +
		"\u015D\u015E\t\x05\x02\x02\u015Ef\x03\x02\x02\x02\u015F\u0160\t\x0F\x02" +
		"\x02\u0160h\x03\x02\x02\x02\u0161\u0162\t\x10\x02\x02\u0162j\x03\x02\x02" +
		"\x02\u0163\u0164\t\x11\x02\x02\u0164l\x03\x02\x02\x02\u0165\u0166\t\x12" +
		"\x02\x02\u0166n\x03\x02\x02\x02\u0167\u0168\t\x13\x02\x02\u0168p\x03\x02" +
		"\x02\x02\u0169\u016A\t\x14\x02\x02\u016Ar\x03\x02\x02\x02\u016B\u016C" +
		"\t\x15\x02\x02\u016Ct\x03\x02\x02\x02\u016D\u016E\t\x16\x02\x02\u016E" +
		"v\x03\x02\x02\x02\u016F\u0170\t\x17\x02\x02\u0170x\x03\x02\x02\x02\u0171" +
		"\u0172\t\x18\x02\x02\u0172z\x03\x02\x02\x02\u0173\u0174\t\x19\x02\x02" +
		"\u0174|\x03\x02\x02\x02\u0175\u0176\t\x1A\x02\x02\u0176~\x03\x02\x02\x02" +
		"\u0177\u0178\t\x1B\x02\x02\u0178\x80\x03\x02\x02\x02\u0179\u017A\t\x1C" +
		"\x02\x02\u017A\x82\x03\x02\x02\x02\u017B\u017C\t\x1D\x02\x02\u017C\x84" +
		"\x03\x02\x02\x02\u017D\u017E\t\x1E\x02\x02\u017E\x86\x03\x02\x02\x02\u017F" +
		"\u0180\t\x1F\x02\x02\u0180\x88\x03\x02\x02\x02\u0181\u0182\t \x02\x02" +
		"\u0182\x8A\x03\x02\x02\x02\u0183\u0184\t!\x02\x02\u0184\x8C\x03\x02\x02" +
		"\x02\u0185\u0186\t\"\x02\x02\u0186\x8E\x03\x02\x02\x02\u0187\u0188\t#" +
		"\x02\x02\u0188\x90\x03\x02\x02\x02\x15\x02\xEA\xEC\xF2\xF7\xFE\u0101\u0106" +
		"\u010C\u0110\u0115\u0119\u011E\u0120\u0129\u0132\u0139\u013E\u0147\x03" +
		"\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!NCalcLexer.__ATN) {
			NCalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(NCalcLexer._serializedATN));
		}

		return NCalcLexer.__ATN;
	}

}

